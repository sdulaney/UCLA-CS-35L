Homework: SSH setup and use in applications

NOTE: Per the spec, this is a log of what I did in the lab so that I can reproduce the results later and I've briefly noted down what I did and what happened. Trivial commands may or may not be
explained.

# The GNU/Linux server used was lnxsrv06.

# Generate a key pair with the GNU Privacy Guardâ€™s commands (choose default options when prompted)
gpg2 --gen-key

Output of previous command:
gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0)
Key does not expire at all
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: Stewart Dulaney
Email address: sdulaney@ucla.edu
Comment: Turkey
You selected this USER-ID:
    "Stewart Dulaney (Turkey) <sdulaney@ucla.edu>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.   # 6BdwGjrdUh

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key FE75A706 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   2  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 2u
pub   2048R/FE75A706 2019-11-26
      Key fingerprint = 0CEC 608C 62B2 9C48 542E  EA30 2A96 275D FE75 A706
uid                  Stewart Dulaney (Turkey) <sdulaney@ucla.edu>
sub   2048R/78F2BDAB 2019-11-26

# Note the step to increase entropy was not needed in this case.
  
# Export public key, in ASCII format, into hw-pubkey.asc
gpg2 --armor --export sdulaney@ucla.edu > hw-pubkey.asc

# Copy /sys/bus/i2c/devices/0-0050/eeprom from BeagleBone to my laptop
scp root@192.168.7.2:/sys/bus/i2c/devices/0-0050/eeprom ~/Downloads

Output of previous command:
Debian GNU/Linux 8

BeagleBoard.org Debian Image 2016-10-20

Support/FAQ: http://elinux.org/Beagleboard:BeagleBoneBlack_Debian

default username:password is [debian:temppwd]

eeprom                                                             100%   32KB  34.3KB/s   00:00

# Copy eeprom to lnxsrv06
scp ~/Downloads/eeprom stewart@lnxsrv06.seas.ucla.edu:/u/cs/ugrad/stewart/Assignment8/hw/

Output of previous command:
eeprom                                                             100%   32KB   1.8MB/s   00:00

# Use the private key you created to make a detached clear signature eeprom.sig for eeprom
gpg2 --armor --output eeprom.sig --detach-sig eeprom

Output of previous command:

You need a passphrase to unlock the secret key for
user: "Stewart Dulaney (Turkey) <sdulaney@ucla.edu>"
2048-bit RSA key, ID FE75A706, created 2019-11-26	# 6BdwGjrdUh

########## Question 1



########## Question 2
