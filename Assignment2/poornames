#!/bin/sh

# The directory we are searching
D=""

# Do field splitting on newlines to support spaces in file names
IFS=$'\n'

check_filenames () {
    local dir="$1"
    local recurse="$2"

    # Check for read permissions on directory
    if [ ! -r "$dir" ]
    then
	echo "The input directory $dir cannot be read." 1>&2
	exit
    fi

    # If dir does not have a trailing '/', add one
    if [ "$dir" = ${dir%/} ]
    then
	dir="$dir/"
    fi
    
    # Exclude the input directory dir (first line of find output)
    local filenames=`find "$dir" -maxdepth 1 -exec basename {} \; | tail -n +2`

    local violations=""
    for filename in $filenames
    do
	# Rule 1
	if [ ! -z "`echo "$filename" | grep -E '[^A-Za-z._-]'`" ]
	then
	    violations="$violations$filename\n"
	fi
	# Rule 2
	if [ ! -z "`echo "$filename" | grep -E '^-'`" ]
	then
            violations="$violations$filename\n"
	fi
	# Rule 3
	if [ ! -z "`echo "$filename" | grep -E -v '(^\.$|^\.\.$)' | grep -E '^\.'`" ]
	then
            violations="$violations$filename\n"
	fi
	# Rule 4
	if [ ! -z "`echo "$filename" | awk '14 < length'`" ]
	then
            violations="$violations$filename\n"
	fi
	# Check for read permissions on directories
	if [ ! -L "$dir$filename" ] && [ -d "$dir$filename" ] && \
	       [ ! -r "$dir$filename" ]
	then
	    echo "The directory $dir$filename cannot be read." 1>&2
	fi
	# Recurse if directory is readable and '-r' option is used
	if [ ! -L "$dir$filename" ] && [ -d "$dir$filename" ] && \
	       [ -r "$dir$filename" ] && [ "$recurse" = "-r" ]
        then
            check_filenames "$dir$filename" -r
        fi
    done

    # Find case insensitive duplicates
    # Exclude the input directory dir (first line of find output)
    local duplicates=`find "$dir" -maxdepth 1 -exec basename {} \; | tail -n +2`
    duplicates=`echo -e "$duplicates" | sort -f | uniq -iD`

    # Deduplicate any lines that violated a Rule 1-4 and was a duplicate
    violations=`echo -e "$violations$duplicates" | sort -u`

    # Output full file names with trailing '/' for directories
    for violation in $violations
    do
	suffix=""
	if [ ! -L "$dir$violation" ] && [ -d "$dir$violation" ]
	then
	    suffix="/"
	fi
	echo "$dir$violation$suffix"
    done
}

# Check for valid arguments
if [ $# -eq 0 ]
then
    D="."
    check_filenames "$D"
elif [ $# -eq 1 ]
then
    if [ $1 = "-r" ]
    then
	# Recurse on the current directory
	D="."
	check_filenames "$D" -r
	break
    elif [ -L "$1" ]
    then
	echo "The argument D cannot be a symbolic link." 1>&2
	exit 1
    elif [ ! -d "$1" ]
    then
	echo "The argument D must be the name of a directory." 1>&2
	exit 2
    # If $1 starts with '-'
    elif [ $1 != ${1#-} ]    
    then
	echo "The argument D cannot start with the character '-'." 1>&2
	exit 3
    else
	D="$1"
	check_filenames "$D"
    fi
elif [ $# -eq 2 ]
then
    if [ "$1" = "-r" ]
    then
	if [ -L "$2" ]
	then
            echo "The argument D cannot be a symbolic link." 1>&2
            exit 1
	fi
	if [ ! -d "$2" ]
	then
            echo "The argument D must be the name of a directory." 1>&2
            exit 2
	fi
	# If $2 starts with '-'
	if [ $2 != ${2#-} ]
	then
            echo "At most one option-argument can be given." 1>&2
            exit 3
	fi
        # Recurse on $2
	D="$2"
	check_filenames "$D" -r
    else
	echo "Any '-r' option-argument must precede any D operand." 1>&2
        exit 5
    fi
else
    echo "Invalid arguments." 1>&2
    exit 4
fi
